# 档案管理系统 Prompt

## 系统概述
创建一个基于 Node.js 和 MongoDB 的档案管理系统，具有用户认证、权限管理和自定义数据录入功能。

## 核心功能需求

### 1. 用户系统
- 用户角色分为管理员和普通用户
- 支持用户注册和登录
- JWT token 认证，支持7天免登录
- 记录用户操作的客户端IP

### 2. 档案管理
基础数据字段：
- 来源
- 要素

自定义数据：
- 支持键值对格式文本输入
- 格式示例：
```
姓名: 张三
性别: 男
身份证号: 440123199001011234
户籍地址: 广东省广州市天河区
```
- 支持中英文冒号
- 自动处理空格和换行

### 3. 权限控制
管理员权限：
- 可以查看所有档案
- 可以修改所有档案
- 可以删除任何档案

普通用户权限：
- 可以查看所有档案
- 只能修改自己创建的档案
- 不能删除档案
- 可以录入新档案

### 4. 界面功能
导航栏：
- 首页（显示统计信息）
- 档案录入
- 档案列表（分页显示）
- 档案查询

档案列表显示：
- 序号
- 基础数据
- 自定义数据
- 录入信息（账号、时间、IP）
- 操作按钮（修改/删除）

### 5. 搜索功能
- 支持模糊搜索
- 搜索范围包括所有字段
- 分页显示结果

## 技术要求

### 后端
- Node.js + Express
- MongoDB 数据库
- JWT 认证
- RESTful API

### 前端
- 原生 JavaScript
- 响应式设计
- 移动端适配

### 安全性
- 密码加密存储
- Token 认证
- 权限验证
- 输入验证

## 文件结构
```
project/
├── models/              # 数据模型
│   ├── Archive.js      # 档案模型
│   └── User.js         # 用户模型
├── middleware/          # 中间件
│   └── auth.js         # 认证中间件
├── public/             # 前端文件
│   ├── index.html      # 主页面
│   ├── style.css       # 样式文件
│   └── script.js       # 前端脚本
├── scripts/            # 脚本文件
│   ├── createAdmin.js  # 创建管理员脚本
│   └── createUser.js   # 创建用户脚本
├── app.js              # 应用主文件
├── start.sh           # 启动脚本
└── stop.sh            # 停止脚本
```

## API 接口

### 认证接口
- POST /auth/login - 用户登录
- POST /auth/register - 用户注册

### 档案接口
- GET /archives/stats - 获取统计信息
- POST /archives - 新增档案
- GET /archives - 获取档案列表（分页）
- GET /archives/search - 搜索档案
- PUT /archives/:id - 修改档案
- DELETE /archives/:id - 删除档案

## 其他要求
- 友好的错误提示
- 优雅的界面设计
- 完整的操作日志
- 详细的代码注释